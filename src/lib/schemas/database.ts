/*
 * ==========================================
 * |          GENERATED BY SUPAZOD          |
 * ==========================================
 */
import { z } from 'zod';

import { type Json } from './../../types/database/supabase';

export const jsonSchema: z.ZodSchema<Json> = z.lazy(() =>
  z
    .union([z.string(), z.number(), z.boolean(), z.record(z.union([jsonSchema, z.undefined()])), z.array(jsonSchema)])
    .nullable()
);

export const graphqlArgsSchema = z.object({
  operationName: z.string().optional(),
  query: z.string().optional(),
  variables: jsonSchema.optional(),
  extensions: jsonSchema.optional()
});

export const graphqlReturnsSchema = jsonSchema;

export const addressesRowSchema = z.object({
  city: z.string().nullable(),
  country: z.string().nullable(),
  created_at: z.string(),
  id: z.string(),
  is_primary: z.boolean().nullable(),
  label: z.string().nullable(),
  person_id: z.string(),
  postal_code: z.string().nullable(),
  state: z.string().nullable(),
  street: z.string().nullable(),
  updated_at: z.string(),
  user_id: z.string()
});

export const addressesInsertSchema = z.object({
  city: z.string().optional().nullable(),
  country: z.string().optional().nullable(),
  created_at: z.string().optional(),
  id: z.string().optional(),
  is_primary: z.boolean().optional().nullable(),
  label: z.string().optional().nullable(),
  person_id: z.string(),
  postal_code: z.string().optional().nullable(),
  state: z.string().optional().nullable(),
  street: z.string().optional().nullable(),
  updated_at: z.string().optional(),
  user_id: z.string()
});

export const addressesUpdateSchema = z.object({
  city: z.string().optional().nullable(),
  country: z.string().optional().nullable(),
  created_at: z.string().optional(),
  id: z.string().optional(),
  is_primary: z.boolean().optional().nullable(),
  label: z.string().optional().nullable(),
  person_id: z.string().optional(),
  postal_code: z.string().optional().nullable(),
  state: z.string().optional().nullable(),
  street: z.string().optional().nullable(),
  updated_at: z.string().optional(),
  user_id: z.string().optional()
});

export const addressesRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal('addresses_person_id_fkey'),
    columns: z.tuple([z.literal('person_id')]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal('person'),
    referencedColumns: z.tuple([z.literal('id')])
  })
]);

export const contactMethodsRowSchema = z.object({
  created_at: z.string(),
  id: z.string(),
  is_contact_method: z.boolean().nullable(),
  is_primary: z.boolean().nullable(),
  label: z.string().nullable(),
  person_id: z.string(),
  platform_icon: z.string().nullable(),
  type: z.string(),
  updated_at: z.string(),
  user_id: z.string(),
  value: z.string()
});

export const contactMethodsInsertSchema = z.object({
  created_at: z.string().optional(),
  id: z.string().optional(),
  is_contact_method: z.boolean().optional().nullable(),
  is_primary: z.boolean().optional().nullable(),
  label: z.string().optional().nullable(),
  person_id: z.string(),
  platform_icon: z.string().optional().nullable(),
  type: z.string(),
  updated_at: z.string().optional(),
  user_id: z.string(),
  value: z.string()
});

export const contactMethodsUpdateSchema = z.object({
  created_at: z.string().optional(),
  id: z.string().optional(),
  is_contact_method: z.boolean().optional().nullable(),
  is_primary: z.boolean().optional().nullable(),
  label: z.string().optional().nullable(),
  person_id: z.string().optional(),
  platform_icon: z.string().optional().nullable(),
  type: z.string().optional(),
  updated_at: z.string().optional(),
  user_id: z.string().optional(),
  value: z.string().optional()
});

export const contactMethodsRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal('contact_methods_person_id_fkey'),
    columns: z.tuple([z.literal('person_id')]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal('person'),
    referencedColumns: z.tuple([z.literal('id')])
  })
]);

export const conversationsRowSchema = z.object({
  created_at: z.string(),
  id: z.string(),
  name: z.string(),
  owner_identifier: z.string(),
  owner_type: z.string(),
  updated_at: z.string(),
  user_id: z.string()
});

export const conversationsInsertSchema = z.object({
  created_at: z.string().optional(),
  id: z.string().optional(),
  name: z.string().optional(),
  owner_identifier: z.string(),
  owner_type: z.string(),
  updated_at: z.string().optional(),
  user_id: z.string()
});

export const conversationsUpdateSchema = z.object({
  created_at: z.string().optional(),
  id: z.string().optional(),
  name: z.string().optional(),
  owner_identifier: z.string().optional(),
  owner_type: z.string().optional(),
  updated_at: z.string().optional(),
  user_id: z.string().optional()
});

export const customFieldOptionsRowSchema = z.object({
  created_at: z.string().nullable(),
  custom_field_id: z.string(),
  description: z.string().nullable(),
  display_order: z.number(),
  id: z.string(),
  updated_at: z.string().nullable(),
  user_id: z.string(),
  value: z.string()
});

export const customFieldOptionsInsertSchema = z.object({
  created_at: z.string().optional().nullable(),
  custom_field_id: z.string(),
  description: z.string().optional().nullable(),
  display_order: z.number(),
  id: z.string().optional(),
  updated_at: z.string().optional().nullable(),
  user_id: z.string(),
  value: z.string()
});

export const customFieldOptionsUpdateSchema = z.object({
  created_at: z.string().optional().nullable(),
  custom_field_id: z.string().optional(),
  description: z.string().optional().nullable(),
  display_order: z.number().optional(),
  id: z.string().optional(),
  updated_at: z.string().optional().nullable(),
  user_id: z.string().optional(),
  value: z.string().optional()
});

export const customFieldOptionsRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal('custom_field_options_custom_field_id_fkey'),
    columns: z.tuple([z.literal('custom_field_id')]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal('custom_fields'),
    referencedColumns: z.tuple([z.literal('id')])
  })
]);

export const customFieldValuesRowSchema = z.object({
  created_at: z.string().nullable(),
  custom_field_id: z.string(),
  entity_id: z.string(),
  id: z.string(),
  updated_at: z.string().nullable(),
  user_id: z.string(),
  value: z.string().nullable()
});

export const customFieldValuesInsertSchema = z.object({
  created_at: z.string().optional().nullable(),
  custom_field_id: z.string(),
  entity_id: z.string(),
  id: z.string().optional(),
  updated_at: z.string().optional().nullable(),
  user_id: z.string(),
  value: z.string().optional().nullable()
});

export const customFieldValuesUpdateSchema = z.object({
  created_at: z.string().optional().nullable(),
  custom_field_id: z.string().optional(),
  entity_id: z.string().optional(),
  id: z.string().optional(),
  updated_at: z.string().optional().nullable(),
  user_id: z.string().optional(),
  value: z.string().optional().nullable()
});

export const customFieldValuesRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal('custom_field_values_custom_field_id_fkey'),
    columns: z.tuple([z.literal('custom_field_id')]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal('custom_fields'),
    referencedColumns: z.tuple([z.literal('id')])
  })
]);

export const customFieldsRowSchema = z.object({
  created_at: z.string().nullable(),
  display_order: z.number(),
  entity_type: z.string(),
  field_description: z.string().nullable(),
  field_type: z.string(),
  group_id: z.string().nullable(),
  id: z.string(),
  name: z.string(),
  permanent: z.boolean(),
  updated_at: z.string().nullable(),
  user_id: z.string()
});

export const customFieldsInsertSchema = z.object({
  created_at: z.string().optional().nullable(),
  display_order: z.number(),
  entity_type: z.string(),
  field_description: z.string().optional().nullable(),
  field_type: z.string(),
  group_id: z.string().optional().nullable(),
  id: z.string().optional(),
  name: z.string(),
  permanent: z.boolean().optional(),
  updated_at: z.string().optional().nullable(),
  user_id: z.string()
});

export const customFieldsUpdateSchema = z.object({
  created_at: z.string().optional().nullable(),
  display_order: z.number().optional(),
  entity_type: z.string().optional(),
  field_description: z.string().optional().nullable(),
  field_type: z.string().optional(),
  group_id: z.string().optional().nullable(),
  id: z.string().optional(),
  name: z.string().optional(),
  permanent: z.boolean().optional(),
  updated_at: z.string().optional().nullable(),
  user_id: z.string().optional()
});

export const customFieldsRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal('custom_fields_group_id_fkey'),
    columns: z.tuple([z.literal('group_id')]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal('group'),
    referencedColumns: z.tuple([z.literal('id')])
  })
]);

export const groupRowSchema = z.object({
  created_at: z.string(),
  icon: z.string(),
  id: z.string(),
  name: z.string(),
  slug: z.string(),
  updated_at: z.string(),
  user_id: z.string().nullable()
});

export const groupInsertSchema = z.object({
  created_at: z.string().optional(),
  icon: z.string(),
  id: z.string().optional(),
  name: z.string(),
  slug: z.string(),
  updated_at: z.string().optional(),
  user_id: z.string().optional().nullable()
});

export const groupUpdateSchema = z.object({
  created_at: z.string().optional(),
  icon: z.string().optional(),
  id: z.string().optional(),
  name: z.string().optional(),
  slug: z.string().optional(),
  updated_at: z.string().optional(),
  user_id: z.string().optional().nullable()
});

export const groupMemberRowSchema = z.object({
  created_at: z.string(),
  group_id: z.string().nullable(),
  id: z.string(),
  person_id: z.string().nullable(),
  user_id: z.string().nullable()
});

export const groupMemberInsertSchema = z.object({
  created_at: z.string().optional(),
  group_id: z.string().optional().nullable(),
  id: z.string().optional(),
  person_id: z.string().optional().nullable(),
  user_id: z.string().optional().nullable()
});

export const groupMemberUpdateSchema = z.object({
  created_at: z.string().optional(),
  group_id: z.string().optional().nullable(),
  id: z.string().optional(),
  person_id: z.string().optional().nullable(),
  user_id: z.string().optional().nullable()
});

export const groupMemberRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal('group_person_group_id_fkey'),
    columns: z.tuple([z.literal('group_id')]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal('group'),
    referencedColumns: z.tuple([z.literal('id')])
  }),
  z.object({
    foreignKeyName: z.literal('group_person_person_id_fkey'),
    columns: z.tuple([z.literal('person_id')]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal('person'),
    referencedColumns: z.tuple([z.literal('id')])
  })
]);

export const integratedAccountsRowSchema = z.object({
  account_id: z.string().nullable(),
  account_name: z.string(),
  account_status: z.string(),
  auth_status: z.string(),
  created_at: z.string(),
  id: z.string(),
  updated_at: z.string().nullable(),
  user_id: z.string()
});

export const integratedAccountsInsertSchema = z.object({
  account_id: z.string().optional().nullable(),
  account_name: z.string(),
  account_status: z.string(),
  auth_status: z.string(),
  created_at: z.string().optional(),
  id: z.string().optional(),
  updated_at: z.string().optional().nullable(),
  user_id: z.string()
});

export const integratedAccountsUpdateSchema = z.object({
  account_id: z.string().optional().nullable(),
  account_name: z.string().optional(),
  account_status: z.string().optional(),
  auth_status: z.string().optional(),
  created_at: z.string().optional(),
  id: z.string().optional(),
  updated_at: z.string().optional().nullable(),
  user_id: z.string().optional()
});

export const interactionsRowSchema = z.object({
  created_at: z.string(),
  id: z.string(),
  note: z.string().nullable(),
  person_id: z.string().nullable(),
  type: z.string().nullable(),
  user_id: z.string().nullable()
});

export const interactionsInsertSchema = z.object({
  created_at: z.string().optional(),
  id: z.string().optional(),
  note: z.string().optional().nullable(),
  person_id: z.string().optional().nullable(),
  type: z.string().optional().nullable(),
  user_id: z.string().optional().nullable()
});

export const interactionsUpdateSchema = z.object({
  created_at: z.string().optional(),
  id: z.string().optional(),
  note: z.string().optional().nullable(),
  person_id: z.string().optional().nullable(),
  type: z.string().optional().nullable(),
  user_id: z.string().optional().nullable()
});

export const interactionsRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal('interactions_person_id_fkey'),
    columns: z.tuple([z.literal('person_id')]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal('person'),
    referencedColumns: z.tuple([z.literal('id')])
  })
]);

export const messagesRowSchema = z.object({
  conversation_id: z.string(),
  created_at: z.string(),
  id: z.string(),
  message: jsonSchema,
  updated_at: z.string(),
  user_id: z.string()
});

export const messagesInsertSchema = z.object({
  conversation_id: z.string(),
  created_at: z.string().optional(),
  id: z.string().optional(),
  message: jsonSchema,
  updated_at: z.string().optional(),
  user_id: z.string()
});

export const messagesUpdateSchema = z.object({
  conversation_id: z.string().optional(),
  created_at: z.string().optional(),
  id: z.string().optional(),
  message: jsonSchema.optional(),
  updated_at: z.string().optional(),
  user_id: z.string().optional()
});

export const messagesRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal('messages_conversation_id_fkey'),
    columns: z.tuple([z.literal('conversation_id')]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal('conversations'),
    referencedColumns: z.tuple([z.literal('id')])
  })
]);

export const organizationRowSchema = z.object({
  created_at: z.string(),
  description: z.string().nullable(),
  id: z.string(),
  name: z.string(),
  url: z.string().nullable(),
  user_id: z.string()
});

export const organizationInsertSchema = z.object({
  created_at: z.string().optional(),
  description: z.string().optional().nullable(),
  id: z.string().optional(),
  name: z.string(),
  url: z.string().optional().nullable(),
  user_id: z.string()
});

export const organizationUpdateSchema = z.object({
  created_at: z.string().optional(),
  description: z.string().optional().nullable(),
  id: z.string().optional(),
  name: z.string().optional(),
  url: z.string().optional().nullable(),
  user_id: z.string().optional()
});

export const personRowSchema = z.object({
  ai_summary: jsonSchema.nullable(),
  bio: z.string().nullable(),
  birthday: z.string().nullable(),
  completeness_score: z.number().nullable(),
  created_at: z.string(),
  date_met: z.string().nullable(),
  first_name: z.string(),
  follow_up_score: z.number(),
  id: z.string(),
  last_name: z.string().nullable(),
  linkedin_public_id: z.string().nullable(),
  avatar_url: z.string().nullable(),
  title: z.string().nullable(),
  updated_at: z.string(),
  user_id: z.string()
});

export const personInsertSchema = z.object({
  ai_summary: jsonSchema.optional().nullable(),
  bio: z.string().optional().nullable(),
  birthday: z.string().optional().nullable(),
  completeness_score: z.number().optional().nullable(),
  created_at: z.string().optional(),
  date_met: z.string().optional().nullable(),
  first_name: z.string(),
  follow_up_score: z.number().optional(),
  id: z.string().optional(),
  last_name: z.string().optional().nullable(),
  linkedin_public_id: z.string().optional().nullable(),
  avatar_url: z.string().optional().nullable(),
  title: z.string().optional().nullable(),
  updated_at: z.string().optional(),
  user_id: z.string()
});

export const personUpdateSchema = z.object({
  ai_summary: jsonSchema.optional().nullable(),
  bio: z.string().optional().nullable(),
  birthday: z.string().optional().nullable(),
  completeness_score: z.number().optional().nullable(),
  created_at: z.string().optional(),
  date_met: z.string().optional().nullable(),
  first_name: z.string().optional(),
  follow_up_score: z.number().optional(),
  id: z.string().optional(),
  last_name: z.string().optional().nullable(),
  linkedin_public_id: z.string().optional().nullable(),
  avatar_url: z.string().optional().nullable(),
  title: z.string().optional().nullable(),
  updated_at: z.string().optional(),
  user_id: z.string().optional()
});

export const personOrganizationRowSchema = z.object({
  created_at: z.string(),
  id: z.string(),
  organization_id: z.string(),
  person_id: z.string(),
  user_id: z.string()
});

export const personOrganizationInsertSchema = z.object({
  created_at: z.string().optional(),
  id: z.string().optional(),
  organization_id: z.string(),
  person_id: z.string(),
  user_id: z.string()
});

export const personOrganizationUpdateSchema = z.object({
  created_at: z.string().optional(),
  id: z.string().optional(),
  organization_id: z.string().optional(),
  person_id: z.string().optional(),
  user_id: z.string().optional()
});

export const personOrganizationRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal('person_organization_organization_id_fkey'),
    columns: z.tuple([z.literal('organization_id')]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal('organization'),
    referencedColumns: z.tuple([z.literal('id')])
  }),
  z.object({
    foreignKeyName: z.literal('person_organization_person_id_fkey'),
    columns: z.tuple([z.literal('person_id')]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal('person'),
    referencedColumns: z.tuple([z.literal('id')])
  })
]);

export const personPersonRelationRowSchema = z.object({
  created_at: z.string(),
  edge_person_id: z.string(),
  id: z.string(),
  node_person_id: z.string(),
  note: z.string().nullable(),
  relation: z.string().nullable()
});

export const personPersonRelationInsertSchema = z.object({
  created_at: z.string().optional(),
  edge_person_id: z.string(),
  id: z.string().optional(),
  node_person_id: z.string(),
  note: z.string().optional().nullable(),
  relation: z.string().optional().nullable()
});

export const personPersonRelationUpdateSchema = z.object({
  created_at: z.string().optional(),
  edge_person_id: z.string().optional(),
  id: z.string().optional(),
  node_person_id: z.string().optional(),
  note: z.string().optional().nullable(),
  relation: z.string().optional().nullable()
});

export const personPersonRelationRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal('people_relations_edge_person_id_fkey'),
    columns: z.tuple([z.literal('edge_person_id')]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal('person'),
    referencedColumns: z.tuple([z.literal('id')])
  }),
  z.object({
    foreignKeyName: z.literal('people_relations_node_person_id_fkey'),
    columns: z.tuple([z.literal('node_person_id')]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal('person'),
    referencedColumns: z.tuple([z.literal('id')])
  })
]);

export const suggestionsRowSchema = z.object({
  bad: z.boolean(),
  created_at: z.string(),
  id: z.string(),
  person_id: z.string().nullable(),
  saved: z.boolean(),
  suggestion: jsonSchema,
  topic: z.string(),
  type: z.string(),
  user_id: z.string().nullable(),
  viewed: z.boolean().nullable()
});

export const suggestionsInsertSchema = z.object({
  bad: z.boolean().optional(),
  created_at: z.string().optional(),
  id: z.string().optional(),
  person_id: z.string().optional().nullable(),
  saved: z.boolean().optional(),
  suggestion: jsonSchema,
  topic: z.string(),
  type: z.string().optional(),
  user_id: z.string().optional().nullable(),
  viewed: z.boolean().optional().nullable()
});

export const suggestionsUpdateSchema = z.object({
  bad: z.boolean().optional(),
  created_at: z.string().optional(),
  id: z.string().optional(),
  person_id: z.string().optional().nullable(),
  saved: z.boolean().optional(),
  suggestion: jsonSchema.optional(),
  topic: z.string().optional(),
  type: z.string().optional(),
  user_id: z.string().optional().nullable(),
  viewed: z.boolean().optional().nullable()
});

export const suggestionsRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal('suggestions_person_id_fkey'),
    columns: z.tuple([z.literal('person_id')]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal('person'),
    referencedColumns: z.tuple([z.literal('id')])
  })
]);

export const taskSuggestionRowSchema = z.object({
  bad_suggestion: z.boolean().nullable(),
  bad_suggestion_reason: z.string().nullable(),
  completed_at: z.string().nullable(),
  context: jsonSchema,
  created_at: z.string(),
  end_at: z.string(),
  id: z.string(),
  person_id: z.string().nullable(),
  skipped_at: z.string().nullable(),
  snoozed_at: z.string().nullable(),
  suggested_action: jsonSchema,
  suggested_action_type: z.string(),
  trigger: z.string(),
  updated_at: z.string(),
  user_id: z.string()
});

export const taskSuggestionInsertSchema = z.object({
  bad_suggestion: z.boolean().optional().nullable(),
  bad_suggestion_reason: z.string().optional().nullable(),
  completed_at: z.string().optional().nullable(),
  context: jsonSchema,
  created_at: z.string().optional(),
  end_at: z.string(),
  id: z.string().optional(),
  person_id: z.string().optional().nullable(),
  skipped_at: z.string().optional().nullable(),
  snoozed_at: z.string().optional().nullable(),
  suggested_action: jsonSchema,
  suggested_action_type: z.string(),
  trigger: z.string(),
  updated_at: z.string().optional(),
  user_id: z.string()
});

export const taskSuggestionUpdateSchema = z.object({
  bad_suggestion: z.boolean().optional().nullable(),
  bad_suggestion_reason: z.string().optional().nullable(),
  completed_at: z.string().optional().nullable(),
  context: jsonSchema.optional(),
  created_at: z.string().optional(),
  end_at: z.string().optional(),
  id: z.string().optional(),
  person_id: z.string().optional().nullable(),
  skipped_at: z.string().optional().nullable(),
  snoozed_at: z.string().optional().nullable(),
  suggested_action: jsonSchema.optional(),
  suggested_action_type: z.string().optional(),
  trigger: z.string().optional(),
  updated_at: z.string().optional(),
  user_id: z.string().optional()
});

export const taskSuggestionRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal('task_suggestion_person_id_fkey'),
    columns: z.tuple([z.literal('person_id')]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal('person'),
    referencedColumns: z.tuple([z.literal('id')])
  })
]);

export const userContextRowSchema = z.object({
  content: z.string(),
  created_at: z.string(),
  id: z.string(),
  processed_at: z.string().nullable(),
  reason: z.string(),
  user_id: z.string()
});

export const userContextInsertSchema = z.object({
  content: z.string(),
  created_at: z.string().optional(),
  id: z.string().optional(),
  processed_at: z.string().optional().nullable(),
  reason: z.string(),
  user_id: z.string()
});

export const userContextUpdateSchema = z.object({
  content: z.string().optional(),
  created_at: z.string().optional(),
  id: z.string().optional(),
  processed_at: z.string().optional().nullable(),
  reason: z.string().optional(),
  user_id: z.string().optional()
});

export const userProfileRowSchema = z.object({
  avatar_url: z.string().nullable(),
  context_summary: jsonSchema.nullable(),
  context_summary_completeness_score: z.number(),
  created_at: z.string(),
  first_name: z.string().nullable(),
  id: z.string(),
  last_name: z.string().nullable(),
  onboarding: jsonSchema.nullable(),
  updated_at: z.string().nullable(),
  user_id: z.string()
});

export const userProfileInsertSchema = z.object({
  avatar_url: z.string().optional().nullable(),
  context_summary: jsonSchema.optional().nullable(),
  context_summary_completeness_score: z.number().optional(),
  created_at: z.string().optional(),
  first_name: z.string().optional().nullable(),
  id: z.string().optional(),
  last_name: z.string().optional().nullable(),
  onboarding: jsonSchema.optional().nullable(),
  updated_at: z.string().optional().nullable(),
  user_id: z.string()
});

export const userProfileUpdateSchema = z.object({
  avatar_url: z.string().optional().nullable(),
  context_summary: jsonSchema.optional().nullable(),
  context_summary_completeness_score: z.number().optional(),
  created_at: z.string().optional(),
  first_name: z.string().optional().nullable(),
  id: z.string().optional(),
  last_name: z.string().optional().nullable(),
  onboarding: jsonSchema.optional().nullable(),
  updated_at: z.string().optional().nullable(),
  user_id: z.string().optional()
});

export const waitlistRowSchema = z.object({
  created_at: z.string(),
  email: z.string(),
  id: z.number()
});

export const waitlistInsertSchema = z.object({
  created_at: z.string().optional(),
  email: z.string(),
  id: z.number().optional()
});

export const waitlistUpdateSchema = z.object({
  created_at: z.string().optional(),
  email: z.string().optional(),
  id: z.number().optional()
});

export const websitesRowSchema = z.object({
  created_at: z.string(),
  icon: z.string().nullable(),
  id: z.string(),
  label: z.string().nullable(),
  person_id: z.string(),
  updated_at: z.string(),
  url: z.string(),
  user_id: z.string()
});

export const websitesInsertSchema = z.object({
  created_at: z.string().optional(),
  icon: z.string().optional().nullable(),
  id: z.string().optional(),
  label: z.string().optional().nullable(),
  person_id: z.string(),
  updated_at: z.string().optional(),
  url: z.string(),
  user_id: z.string()
});

export const websitesUpdateSchema = z.object({
  created_at: z.string().optional(),
  icon: z.string().optional().nullable(),
  id: z.string().optional(),
  label: z.string().optional().nullable(),
  person_id: z.string().optional(),
  updated_at: z.string().optional(),
  url: z.string().optional(),
  user_id: z.string().optional()
});

export const websitesRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal('websites_person_id_fkey'),
    columns: z.tuple([z.literal('person_id')]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal('person'),
    referencedColumns: z.tuple([z.literal('id')])
  })
]);

export const beginTestTransactionArgsSchema = z.object({});

export const beginTestTransactionReturnsSchema = z.undefined();

export const getEveryoneElseCompletenessScoreArgsSchema = z.object({
  p_user_id: z.string(),
  p_core_group_slugs: z.array(z.string())
});

export const getEveryoneElseCompletenessScoreReturnsSchema = z.array(
  z.object({
    avg_completeness: z.number(),
    count: z.number()
  })
);

export const getNetworkActivityByPeriodArgsSchema = z.object({
  p_user_id: z.string(),
  p_days: z.number(),
  p_offset: z.number(),
  p_core_group_slugs: z.array(z.string()),
  p_timezone: z.string().optional()
});

export const getNetworkActivityByPeriodReturnsSchema = z.array(
  z.object({
    date: z.string(),
    inner5: z.number(),
    central50: z.number(),
    strategic100: z.number(),
    everyone: z.number()
  })
);

export const getPeopleNeedingFollowUpArgsSchema = z.object({
  p_user_id: z.string(),
  p_group_id: z.string(),
  p_date: z.string()
});

export const getPeopleNeedingFollowUpReturnsSchema = z.array(
  z.object({
    id: z.string(),
    first_name: z.string(),
    last_name: z.string(),
    user_id: z.string()
  })
);

export const getPeopleWithUpcomingBirthdaysArgsSchema = z.object({
  p_user_id: z.string(),
  p_start_date: z.string(),
  p_end_date: z.string()
});

export const getPeopleWithUpcomingBirthdaysReturnsSchema = z.array(
  z.object({
    id: z.string(),
    first_name: z.string(),
    last_name: z.string(),
    birthday: z.string()
  })
);

export const getTodaysNetworkActivityArgsSchema = z.object({
  p_user_id: z.string(),
  p_core_group_slugs: z.array(z.string()),
  p_timezone: z.string().optional()
});

export const getTodaysNetworkActivityReturnsSchema = z.array(
  z.object({
    group_name: z.string(),
    interaction_count: z.number(),
    people: jsonSchema
  })
);

export const rollbackTestTransactionArgsSchema = z.object({});

export const rollbackTestTransactionReturnsSchema = z.undefined();
